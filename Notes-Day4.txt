Fact Table : Stores quantitative information for analysis, and is often denormalized. It consists of 2 types of columns. The foreign key columns that connect to the dimension table, and the measures column that contains the data that is being analysed.

Dimension Table : Stores data about the ways in which the data in the fact table can be analysed.


Fact : products sale
Time Info   product   Customer  Unit sold
8            1          2          10
8            3          1          5
9            1          5          20
10           5          2           3 

Dimension table 

1. Customer Centric
2. Product Centric
3. Time Centric
4. Region Specific
5. Country Specific

Star									Snow Flake  - 6000

Fact and Dimension Tables				Fact,Dimension and sub Dimension
Top-Down Model						Bottom Up Model
Uses More Space					      Uses less Space	
Takes less time for query execution			Takes more time for execution	
Denormalized data						Normalized and also denormalized
Design is simple						Design  is complex
Query complexity is low                         Query complexity is high
Less Foreign Keys						More foreign keys
High Data Redundancy					Less Data Redundancy

Galaxy Schemas: Based on the levels of hierarchy, seperate dimensions are possible
Example : levels like Country, region,state,city etc can very clearly have 4 dimensions resp.
This type of schema can be built by splitting start into many star
helpful in aggregating fact tables for better understanding


ETL : Talend, Informatica, Tableau

Various OLAP Systems
HOLAP - Hybrid OLAP
MOLAP - Multidimensional OLAP
ROLAP - Relational OLAP

Process of moving from finer granular data to coarser data is called as roll up ,and the opposite is called as drill down


Pivot and UnPivot : are operators used to generate multi dimensional report
Pivot is used when we want to transfer row wise data into column wise
UnPivot is used when we want to convert column wise data into row wise

Hierarchial Queries : If using IBMs IMS(Information Management System - a Hierrachial database), then we need not write hierrachial queries. If other databases, then we need to write H-Queries to handle parent-child data for better understanding and reporting

There are basically 3 types of H-Query Syntax for different commercial database

  - connect by  - Oracle SQL, DB2, Postgresql,Informix
  - CTE         - MS SQL
  - ANSI SQL

- Table Partitioning : Dividing the table into simpler, smaaller data
- Benefits of partitioning
    1. Performance improvements
    2. Increases the Availability
    3. Helps in storage cost optimization
    4. Data Managing becomes easier
- When to do partition
   - Table size > 2GB
   - History Data co-existing with recent data
   - Distribute Data across various devices
   - When tabvle performance is going down
- Types of Partitioning
   1. Range Partition
   2. List Partition
   3. Hash Partition

Eg: create table Products(Pid numeric, Price numeric)
    partition by range(price)
    (partition p1 values less than(2000).
partition p2 values less than(5000),
partition p3 values less than(10000),
partition p3 values less than(maxvalue))

insert into Products values(101023,5200)  -- inserted in p3
insert into Products values(11101,3500) --- inserted in p2

select * from products parition(p3)

Eg : Create table Employee(empno int, state varchar(25))
partion by List(state)
(partition s1_AP values('AndhraPradesh'),
partition s1_MAH values('Maharashtra'),
partition s1_TN values('Tamilnadu'),
partition s1_def values(Default)
   

Eg: create table emp(empid int, empname varchar(35)...)
partition by hash(empid)partitions 5;

sys_p1, sys_p2 etc..

--Materialized Views: 

Views have only the SQL statements stored and not the data

Materialized views is a view that stores the results of the view query along with the view

View									Materialized View
Only Sql Definition is stored					Definition and the data that is the resultset is stored
Latest Data                                           Data may not be latest
slower 								faster
uses the same indexes as the underlying table         can create indexes


Normalization : 	is a process of decomposing a larger table into several smaller, simpler ones.
1NF, 2NF, 3NF, 4th,5th and BCNF
	
Why Normalize?

- Redundancy is at the root of all/several problems
- Can cause insertion,updation and deletion anomalies
- Wastage of storage

Using a technique called as 'functional dependency', we normalize

1. A table is in 1NF, when every row contains exactly only one value for each attribute(column)

2. 2NF states that a table is already in 1NF and every non-prime attribute is fully dependent on the primary key. Partial dependencies are prohibited

3. 3NF states that a table is already in 2NF and no non-prime attribute should have transitive dependencies (a->b->c)  a-> there exists tranitive dependency. Transtitive dependencies are prohibited



